<?php

namespace PerfectImageSizes;

use PerfectImageSizes\LocalStore;

class PluginOptions {

    public function __construct() {

        add_action( 'after_setup_theme' , __CLASS__ . '::init' , 11  );
        
    }
    
    
    public static function init() {
        
        // return early if not executed by admin
        if ( ! is_admin() ) return;
        add_action( 'admin_menu', __CLASS__ .  '::admin_menu_item' );
        add_filter( 'plugin_action_links_' . PERFECTIMAGESIZES_BASE,  __CLASS__ . '::plugin_action_link' , 10, 2 );

        // remove the disabled image sizes that were selected from generating an thumb image
        add_filter( 'intermediate_image_sizes_advanced', __CLASS__ .  '::remove_disabled_image_sizes' );

        // disable big image size threshold if selected
        if( intval( get_option( 'pis_disable_big_image_size_threshold', 0 ) ) === 1 ){
            add_filter( 'big_image_size_threshold', '__return_false' );
        }


    }

    
    /**
     * plugin_action_link
     *
     * @param  mixed $links
     * @param  mixed $file
     * @return void
     */
    public static function plugin_action_link( $links, $file ){
        array_unshift( $links, '<a href="options-general.php?page=' . PERFECTIMAGESIZES_BASE . '">' . __( 'Settings', 'perfect-image-sizes' ) . '</a>' );
        return $links;
    }
    
    /**
     * admin_menu_item
     *
     * @return void
     */
    public static function admin_menu_item(){

		// check minimum capability of delete_users
		if( !current_user_can('delete_users') ) return;

        \add_submenu_page(
            'options-general.php',
            __( 'Perfect image sizes', 'perfect-image-sizes' ),
            __( 'Perfect image sizes', 'perfect-image-sizes' ),
            'manage_options',
            PERFECTIMAGESIZES_BASE,
            __CLASS__ . '::options_page'
        );
    } 

    public static function get_all_image_sizes(){
        global $_wp_additional_image_sizes;
        $sizes = array();
        foreach( get_intermediate_image_sizes() as $_size ){
            if( in_array( $_size, array( 'thumbnail', 'medium', 'medium_large', 'large' ) ) ){
                $sizes[ $_size ]['w'] = get_option( "{$_size}_size_w" );
                $sizes[ $_size ]['h'] = get_option( "{$_size}_size_h" );
            }elseif( isset( $_wp_additional_image_sizes[ $_size ] ) ){
                $sizes[ $_size ] = array(
                    'w' => $_wp_additional_image_sizes[ $_size ]['width'],
                    'h' => $_wp_additional_image_sizes[ $_size ]['height'],
                );
            }
        }
        return $sizes;
    } 
    
    public static function remove_disabled_image_sizes( $sizes ){
        $pis_disabled_sizes = get_option( 'pis_disabled_sizes', array() );
        foreach( $pis_disabled_sizes as $key => $value ){
            if( intval( $value ) ){
                unset( $sizes[ $key ] );
            }
        }
        return $sizes;
    }    
        
    /**
     * options_page
     *
     * @return void
     */
    public static function options_page(){
        
        // try to run options
        self::try_update_options();
        ?>
        <div class="wrap">
            <h2>Perfect image sizes</h2>
        <?php
            self::option_disable_sizes();
            self::option_disable_big_image();
            self::option_images_directory();
            self::option_imager_settings();
            self::option_delete_cached_images();
        ?>
        </div>
        <?php
    }

    private static function option_images_directory() {
        ?>
            <div class="card">
                <h3><?php esc_html_e( 'Images directory', 'perfect-image-sizes' ); ?></h3>
                <p><code><?php echo esc_html( LocalStore::get_pis_dir() ) ?></code></p>
                <?php if( LocalStore::pis_dir_writable() ): ?>
                    <p style="color:#7AD03A"><?php esc_html_e( 'Writeable', 'perfect-image-sizes' ) ?></p>
                <?php else: ?>
                    <p style="color:#A00"><?php esc_html_e( 'Not Writeable - please make sure this folder exists and is writeable!', 'perfect-image-sizes' ) ?></p>
                <?php endif ?>
            </div>
        <?php
    }

    private static function option_disable_sizes() {
        ?>
            <div class="card">
                <h3><?php esc_html_e( 'Disable autogenerated sizes', 'perfect-image-sizes' ) ?></h3>
                <p class="notice notice-info notice-large">
                    <?php esc_html_e( 'You should not disable thumbnail size', 'perfect-image-sizes' ); ?>
                </p>
                <form method="post" action=""><?php
                    wp_nonce_field( 'disabled_sizes', 'pis_disabled_sizes_nonce' );
                    $pis_disabled_sizes = get_option( 'pis_disabled_sizes', array() );
                    $sizes = self::get_all_image_sizes();
                    foreach( $sizes as $size => $data ){
                        if( ! isset( $pis_disabled_sizes[ $size ] ) ){
                            $pis_disabled_sizes[ $size ] = 0;
                        } ?>
                        <label>
                            <input type="checkbox" name="pis_disabled_sizes[<?php echo esc_attr( $size ) ?>]" value="1" <?php checked( $pis_disabled_sizes[ $size ], 1 ) ?>>
                            <?php echo esc_html( $size ) ?> <small>(<?php echo esc_html( $data['w'] . 'x' . $data['h'] ) ?>)</small>
                        </label><br><?php
                    } ?>
                    <br><input class="button button-primary" value="<?php esc_html_e( 'Save', 'perfect-image-sizes' ) ?>" type="submit">
                </form>
            </div>

        <?php
    }

    private static function option_disable_big_image() {
        ?>
            <div class="card">
                <h3><?php esc_html_e( 'Disable big image size threshold', 'perfect-image-sizes' ) ?></h3>
                <p><?php esc_html_e( 'WordPress will automatically scale down your uploaded images, if the original image width or height is above 2560px', 'perfect-image-sizes' ) ?></p>
                <form method="post" action="">
                    <?php wp_nonce_field( 'disable_threshold', 'pis_disable_threshold_nonce' ) ?>
                    <label>
                        <input type="checkbox" name="pis_disable_big_image_size_threshold" value="1" <?php checked( get_option( 'pis_disable_big_image_size_threshold', 0 ), 1 ) ?>>
                        <?php esc_html_e( 'disable auto-scaling of big images', 'perfect-image-sizes' ) ?>
                    </label><br><br>
                    <input class="button button-primary" value="<?php esc_html_e( 'Save', 'perfect-image-sizes' ) ?>" type="submit">
                </form>
            </div>
        <?php
    }

    private static function option_imager_settings() {
        ?>
            <div class="card">
                <h3><?php esc_html_e( 'Imager Settings', 'perfect-image-sizes' ) ?></h3>
                <form method="post" action="">
                    <?php wp_nonce_field( 'imager_settings', 'pis_imager_settings_nonce' ) ?>
                    <?php
                    $imager = get_option( 'pis_imager' , false );
                    ?>
                    <select name="pis_imager">
                        <option><?php esc_html_e( 'Please select an imager' , 'perfect-image-sizes' ); ?></option>
                        <option value="twicpics" <?php selected( $imager, 'twicpics' )?>>TwicPics</option>
                        <option value="cloudimage" <?php selected( $imager, 'cloudimage' )?>>CloudImage</option>
                    </select>
                    <br><br>
                    <p><?php esc_html_e( 'Set the image quality, 0-100. Lower is smaller file. When changed and cache is enabled you will need to flush to generate new images. Leave empty to use default API quality (optional).', 'perfect-image-sizes' ) ?></p>
                    <input type="number" name="pis_api_image_quality" value="<?php esc_html_e( get_option( 'pis_api_image_quality' , false )); ?>">
                    <br><br>
                    <p><?php esc_html_e( 'Provide the API access path. The server image path will be substituted at runtime so that the image will be collected through the API service.', 'perfect-image-sizes' ) ?></p>
                    <input type="text" name="pis_api_access_path" style="width: 100%;" value="<?php esc_html_e( get_option( 'pis_api_access_path' , false )); ?>" placeholder="<?php esc_html_e( 'eg: https://WORKSPACE.twic.pics , https://TOKEN.cloudimg.io/_ALIAS_/' ,'perfect-image-sizes'); ?>">
                    <br><br>
                    <p><?php esc_html_e( 'Once you have tuned in the image sizes, you can activate local cache to serve generated sizes. They will be downloaded when accessed to limit the bandwidth usage of the image API.', 'perfect-image-sizes' ) ?></p>
                    <label>
                        <input type="checkbox" name="pis_enable_cache" value="1" <?php checked( get_option( 'pis_enable_cache', 0 ), 1 ) ?>>
                        <?php esc_html_e( 'Enable local cache', 'perfect-image-sizes' ) ?>
                    </label>
                    <br><br>
                    <input class="button button-primary" value="<?php esc_html_e( 'Save', 'perfect-image-sizes' ) ?>" type="submit">
                </form>
            </div>
        <?php
    }


    private static function option_delete_cached_images() {
        ?>
            <div class="card">
                <h3><?php esc_html_e( 'Delete cached images', 'perfect-image-sizes' ) ?></h3>
                <p><?php esc_html_e( 'Delete all generated image sizes for all images', 'perfect-image-sizes' ) ?></p>
                <p><small><?php esc_html_e( '* they will be regenerated instantly when you visit your website', 'perfect-image-sizes' ) ?></small></p>
                <br>
                <form method="post" action="">
                    <?php wp_nonce_field( 'delete_all_pis_images', 'pis_nonce' ) ?>
                    <input class="button button-primary" value="<?php esc_html_e( 'Delete all', 'perfect-image-sizes' ) ?>" type="submit">
                </form>
            </div>
        <?php
    }
    
    /**
     * try_update_options
     * 
     * When any of the options on the options page are saved, run them here
     *
     * @return void
     */
    private static function try_update_options() {

        // disable autogenerated sizes
        if ( isset( $_POST['pis_disabled_sizes_nonce'] ) && wp_verify_nonce( $_POST['pis_disabled_sizes_nonce'], 'disabled_sizes' ) ) {
            
            $sizes = self::get_all_image_sizes();
            $pis_disabled_sizes = array();
            foreach ( $_POST['pis_disabled_sizes'] as $key => $value ) {
                if ( isset( $sizes[ $key ] ) ){
                    $pis_disabled_sizes[ $key ] = intval( $value );
                }
            }
            update_option( 'pis_disabled_sizes', $pis_disabled_sizes );

            echo '<div class="updated"><p>' . esc_html__( 'Disable autogenerated sizes updated.', 'perfect-image-sizes' ) . '</p></div>';

        } 
        
        // disable big image size threshold
        if ( isset( $_POST['pis_disable_threshold_nonce'] ) && wp_verify_nonce( $_POST['pis_disable_threshold_nonce'], 'disable_threshold' ) ){
            
            $disable_threshold = 0;
            if( isset( $_POST['pis_disable_big_image_size_threshold'] ) ){
                $disable_threshold = intval( $_POST['pis_disable_big_image_size_threshold'] );
            }
            update_option( 'pis_disable_big_image_size_threshold', $disable_threshold ? 1 : 0 );
            echo '<div class="updated"><p>' . esc_html__( 'Big image threshold updated.', 'perfect-image-sizes' ) . '</p></div>';
        } 

        // Imager Settings
        if ( isset( $_POST['pis_imager_settings_nonce'] ) && wp_verify_nonce( $_POST['pis_imager_settings_nonce'], 'imager_settings' ) ) {

            if ( isset( $_POST[ 'pis_imager' ] ) ) {
                $pis_imager = $_POST[ 'pis_imager' ];
                update_option( 'pis_imager' , $pis_imager );
            } else {
                delete_option( 'pis_imager' );
            }

            if ( isset( $_POST[ 'pis_api_access_path' ])) {
                $access_path = $_POST[ 'pis_api_access_path' ];
                update_option( 'pis_api_access_path' , $access_path );
            } else {
                delete_option( 'pis_api_access_path' );
            }

            
            $image_quality = 0;
            if ( isset( $_POST[ 'pis_api_image_quality' ])) {
                $image_quality = intval( $_POST[ 'pis_api_image_quality' ] );
                update_option( 'pis_api_image_quality' , $image_quality );
            } else {
                delete_option( 'pis_api_image_quality' );
            }

            $enable_cache = 0;
            if( isset( $_POST['pis_enable_cache'] ) ){
                $enable_cache = intval( $_POST['pis_enable_cache'] );
            }
            update_option( 'pis_enable_cache', $enable_cache ? 1 : 0 );

            echo '<div class="updated"><p>' . esc_html__( 'Imager settings updated.', 'perfect-image-sizes' ) . '</p></div>';
        } 


        // Delete all cached pis images
        if ( isset( $_POST['pis_nonce'] ) && wp_verify_nonce( $_POST['pis_nonce'], 'delete_all_pis_images' ) ) {

            LocalStore::delete_all_pis_images();
            echo '<div class="updated"><p>' . esc_html__( 'All cached images have been deleted.', 'perfect-image-sizes' ) . '</p></div>';

        } 
        
        // delete single or selected cached images
        if ( isset( $_GET['delete-pis-image'], $_GET['ids'], $_GET['pis_nonce'] ) && wp_verify_nonce( $_GET['pis_nonce'], 'delete_pis_image' ) ){
            $ids = array_map( 'intval', array_map( 'trim', explode( ',', sanitize_key( $_GET['ids'] ) ) ) );
            if( ! empty( $ids ) ){
                foreach ( $ids as $id ){
                    LocalStore::delete_attachment_pis_images( $id );
                }
                echo '<div class="updated"><p>' . esc_html__( 'All cached images for this media file have been deleted.', 'perfect-image-sizes' ) . '</p></div>';
            }
        }

    }

}